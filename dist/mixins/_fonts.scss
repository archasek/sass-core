// =============================================================================
// Unit converters
// =============================================================================

@mixin font-px($fontSet: null, $mobile: null, $tablet: null, $desktop: null, $mobile-sm: null, $tablet-sm: null, $vwFallbackRatio: 0.9) {
  @include font-conv($fontSet, null, px, $mobile, $tablet, $desktop, $mobile-sm, $tablet-sm, $vwFallbackRatio);
}

@mixin font-rem($fontSet: null, $sizesPxRem: null, $mobile: null, $tablet: null, $desktop: null, $mobile-sm: null, $tablet-sm: null, $vwFallbackRatio: 0.9) {
  @include font-conv($fontSet, $sizesPxRem, rem, $mobile, $tablet, $desktop, $mobile-sm, $tablet-sm, $vwFallbackRatio);
}

@mixin font-vw($fontSet: null, $mobile: null, $tablet: null, $desktop: null, $mobile-sm: null, $tablet-sm: null, $vwFallbackRatio: 0.9) {
  @include font-conv($fontSet, null, vw, $mobile, $tablet, $desktop, $mobile-sm, $tablet-sm, $vwFallbackRatio);
}


//universal mixin for rem/percent/px definitions
//generates breakpoints for font sizes converted to specified units (vw, rem or left as px)
//uses specified font set info or passed breakpoint px width as a base
@mixin font-conv($fontSet: null, $sizesPxRem: null, $targetUnit: rem, $mobile: null, $tablet: null, $desktop: null, $mobile-sm: null, $tablet-sm: null, $vwFallbackRatio: 0.9) {
  $isPx: $targetUnit == px;
  $isRem: $targetUnit == rem;
  $isVw: $targetUnit == vw;

  @if not $isPx and not $isRem and not $isVw {
    @warn 'sass-core/font-conv: Wrong target unit!';
  }
  @else if $isRem and not (type-of($sizesPxRem) == map) {
    @warn 'sass-core/font-conv: Sizes for rem must be a map of (breakpoint-name: size-px) values!';
  }
  @else {

    $breakpointInfo: ();
    @if ($fontSet) {
      $breakpointInfo: map_get($font-sets, $fontSet);
    }

    @if ($mobile) {
      $breakpointInfo: map-merge($breakpointInfo, ('mobile': $mobile));
    }
    @if ($mobile-sm) {
      $breakpointInfo: map-merge($breakpointInfo, ('mobile-sm': $mobile-sm));
    }
    @if ($tablet) {
      $breakpointInfo: map-merge($breakpointInfo, ('tablet': $tablet));
    }
    @if ($tablet-sm) {
      $breakpointInfo: map-merge($breakpointInfo, ('tablet-sm': $tablet-sm));
    }
    @if ($desktop) {
      $breakpointInfo: map-merge($breakpointInfo, ('desktop': $desktop));
    }

    @each $breakpoint, $size in $breakpointInfo {

      @if not $isRem or map-has-key($sizesPxRem, $breakpoint) {

        @if $breakpoint == mobile {
          @if $isPx {
            font-size: $size;
          }
          @else if $isRem {
            font-size: unit-rem(map-get($sizesPxRem, $breakpoint), $size);
          }
          @else if $isVw {
            font-size: round($size * $vwFallbackRatio); //fallback
            font-size: unit-vw($size, $breakpoint);
          }
        }
        @else {
          @include respond-to($breakpoint) {

            @if $isPx {
              font-size: $size;
            }
            @else if $isRem {
              font-size: unit-rem(map-get($sizesPxRem, $breakpoint), $size);
            }
            @else if $isVw {
              @if $breakpoint == desktop {
                font-size: $size;
              }
              @else {
                font-size: round($size * $vwFallbackRatio); //fallback
                font-size: unit-vw($size, $breakpoint);
              }
            }
          }
        }
      }
    }
  }
}

// =============================================================================
// Font face (alternative to Compass): https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6#file-_mixins-scss-L30
// =============================================================================

//Font Face
@mixin font-face-custom($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

//Font Face internal: String Replace
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}
